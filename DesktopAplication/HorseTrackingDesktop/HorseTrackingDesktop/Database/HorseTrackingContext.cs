// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;

namespace HorseTrackingDesktop.Models
{
    public partial class HorseTrackingContext : DbContext
    {
        public HorseTrackingContext()
        {
        }

        public HorseTrackingContext(DbContextOptions<HorseTrackingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<Competition> Competition { get; set; }
        public virtual DbSet<CustomNotification> CustomNotification { get; set; }
        public virtual DbSet<Doctor> Doctor { get; set; }
        public virtual DbSet<DoctorSpecialisation> DoctorSpecialisation { get; set; }
        public virtual DbSet<Eat> Eat { get; set; }
        public virtual DbSet<Feeding> Feeding { get; set; }
        public virtual DbSet<Forage> Forage { get; set; }
        public virtual DbSet<Horse> Horse { get; set; }
        public virtual DbSet<HorseGender> HorseGender { get; set; }
        public virtual DbSet<HorseStatus> HorseStatus { get; set; }
        public virtual DbSet<Meal> Meal { get; set; }
        public virtual DbSet<NutritionPlan> NutritionPlan { get; set; }
        public virtual DbSet<PeopleDetails> PeopleDetails { get; set; }
        public virtual DbSet<Shared> Shared { get; set; }
        public virtual DbSet<TakePart> TakePart { get; set; }
        public virtual DbSet<UnitOfMeasure> UnitOfMeasure { get; set; }
        public virtual DbSet<UserAcount> UserAcount { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }
        public virtual DbSet<Visit> Visit { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Activity>(entity =>
            {
                entity.Property(e => e.ActivityId)
                    .ValueGeneratedNever()
                    .HasColumnName("activityID");

                entity.Property(e => e.ActivityType).HasColumnName("activityType");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Description)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.HorseId).HasColumnName("horseID");

                entity.Property(e => e.Intensivity).HasColumnName("intensivity");

                entity.Property(e => e.Satisfaction).HasColumnName("satisfaction");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.TrainerId).HasColumnName("trainerID");

                entity.Property(e => e.UserId).HasColumnName("userID");

                entity.HasOne(d => d.Horse)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.HorseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activity__horseI__51851410");

                entity.HasOne(d => d.Trainer)
                    .WithMany(p => p.ActivityTrainer)
                    .HasForeignKey(d => d.TrainerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activity__traine__5090EFD7");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ActivityUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activity__satisf__4F9CCB9E");
            });

            modelBuilder.Entity<Competition>(entity =>
            {
                entity.Property(e => e.CompetitionId)
                    .ValueGeneratedNever()
                    .HasColumnName("competitionID");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Description)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Rank)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rank");

                entity.Property(e => e.Spot)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("spot");
            });

            modelBuilder.Entity<CustomNotification>(entity =>
            {
                entity.HasKey(e => e.NotificationId)
                    .HasName("PK__CustomNo__4BA5CE898F45D147");

                entity.Property(e => e.NotificationId)
                    .ValueGeneratedNever()
                    .HasColumnName("notificationID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("date")
                    .HasColumnName("createdDate");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.HorseId).HasColumnName("horseID");

                entity.Property(e => e.SendDate)
                    .HasColumnType("date")
                    .HasColumnName("sendDate");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.UserId).HasColumnName("userID");

                entity.HasOne(d => d.Horse)
                    .WithMany(p => p.CustomNotification)
                    .HasForeignKey(d => d.HorseId)
                    .HasConstraintName("FK__CustomNot__horse__405A880E");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CustomNotification)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CustomNot__userI__3F6663D5");
            });

            modelBuilder.Entity<Doctor>(entity =>
            {
                entity.Property(e => e.DoctorId)
                    .ValueGeneratedNever()
                    .HasColumnName("doctorID");

                entity.Property(e => e.DetailsId).HasColumnName("detailsID");

                entity.Property(e => e.SpecialisationId).HasColumnName("specialisationID");

                entity.HasOne(d => d.Details)
                    .WithMany(p => p.Doctor)
                    .HasForeignKey(d => d.DetailsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Doctor__detailsI__2E3BD7D3");

                entity.HasOne(d => d.Specialisation)
                    .WithMany(p => p.Doctor)
                    .HasForeignKey(d => d.SpecialisationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Doctor__speciali__2D47B39A");
            });

            modelBuilder.Entity<DoctorSpecialisation>(entity =>
            {
                entity.HasKey(e => e.SpecialisationId)
                    .HasName("PK__DoctorSp__0171ED12561011F4");

                entity.Property(e => e.SpecialisationId)
                    .ValueGeneratedNever()
                    .HasColumnName("specialisationID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Eat>(entity =>
            {
                entity.Property(e => e.EatId)
                    .ValueGeneratedNever()
                    .HasColumnName("eatID");

                entity.Property(e => e.HorseId).HasColumnName("horseID");

                entity.Property(e => e.NutritionPlanId).HasColumnName("nutritionPlanID");

                entity.HasOne(d => d.Horse)
                    .WithMany(p => p.Eat)
                    .HasForeignKey(d => d.HorseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Eat__horseID__4BCC3ABA");

                entity.HasOne(d => d.NutritionPlan)
                    .WithMany(p => p.Eat)
                    .HasForeignKey(d => d.NutritionPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Eat__nutritionPl__4CC05EF3");
            });

            modelBuilder.Entity<Feeding>(entity =>
            {
                entity.HasKey(e => e.FeedId)
                    .HasName("PK__Feeding__A0A7D53F74BD155F");

                entity.Property(e => e.FeedId)
                    .ValueGeneratedNever()
                    .HasColumnName("feedID");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.ForageId).HasColumnName("forageID");

                entity.Property(e => e.MealId).HasColumnName("mealID");

                entity.Property(e => e.NutritionPlanId).HasColumnName("nutritionPlanID");

                entity.Property(e => e.UnitId).HasColumnName("unitID");

                entity.HasOne(d => d.Forage)
                    .WithMany(p => p.Feeding)
                    .HasForeignKey(d => d.ForageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Feeding__forageI__320C68B7");

                entity.HasOne(d => d.Meal)
                    .WithMany(p => p.Feeding)
                    .HasForeignKey(d => d.MealId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Feeding__mealID__33F4B129");

                entity.HasOne(d => d.NutritionPlan)
                    .WithMany(p => p.Feeding)
                    .HasForeignKey(d => d.NutritionPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Feeding__nutriti__3118447E");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.Feeding)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Feeding__unitID__33008CF0");
            });

            modelBuilder.Entity<Forage>(entity =>
            {
                entity.Property(e => e.ForageId)
                    .ValueGeneratedNever()
                    .HasColumnName("forageID");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Producent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("producent");

                entity.Property(e => e.UnitOfMeasure).HasColumnName("unitOfMeasure");

                entity.HasOne(d => d.UnitOfMeasureNavigation)
                    .WithMany(p => p.Forage)
                    .HasForeignKey(d => d.UnitOfMeasure)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Forage__capacity__2A6B46EF");
            });

            modelBuilder.Entity<Horse>(entity =>
            {
                entity.Property(e => e.HorseId)
                    .ValueGeneratedNever()
                    .HasColumnName("horseID");

                entity.Property(e => e.Birthday)
                    .HasColumnType("date")
                    .HasColumnName("birthday");

                entity.Property(e => e.Breeder)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("breeder");

                entity.Property(e => e.Father)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("father");

                entity.Property(e => e.GenderId).HasColumnName("genderID");

                entity.Property(e => e.Mother)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mother");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Passport)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("passport");

                entity.Property(e => e.Photo)
                    .IsUnicode(false)
                    .HasColumnName("photo");

                entity.Property(e => e.Race)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("race");

                entity.Property(e => e.StatusId).HasColumnName("statusID");

                entity.Property(e => e.UserId).HasColumnName("userID");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.Horse)
                    .HasForeignKey(d => d.GenderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Horse__genderID__3B95D2F1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Horse)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Horse__statusID__3AA1AEB8");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Horse)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Horse__userID__3C89F72A");
            });

            modelBuilder.Entity<HorseGender>(entity =>
            {
                entity.HasKey(e => e.GenderId)
                    .HasName("PK__HorseGen__306E22201C656400");

                entity.Property(e => e.GenderId)
                    .ValueGeneratedNever()
                    .HasColumnName("genderID");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gender");
            });

            modelBuilder.Entity<HorseStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("PK__HorseSta__36257A38A4188C7F");

                entity.Property(e => e.StatusId)
                    .ValueGeneratedNever()
                    .HasColumnName("statusID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Meal>(entity =>
            {
                entity.Property(e => e.MealId)
                    .ValueGeneratedNever()
                    .HasColumnName("mealID");

                entity.Property(e => e.MealName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mealName");
            });

            modelBuilder.Entity<NutritionPlan>(entity =>
            {
                entity.Property(e => e.NutritionPlanId)
                    .ValueGeneratedNever()
                    .HasColumnName("nutritionPlanID");

                entity.Property(e => e.Description)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Icon).HasColumnName("icon");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<PeopleDetails>(entity =>
            {
                entity.HasKey(e => e.DetailsId)
                    .HasName("PK__PeopleDe__EB8EA790F260803A");

                entity.Property(e => e.DetailsId)
                    .ValueGeneratedNever()
                    .HasColumnName("detailsID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("phoneNumber");

                entity.Property(e => e.Street)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("surname");
            });

            modelBuilder.Entity<Shared>(entity =>
            {
                entity.Property(e => e.SharedId)
                    .ValueGeneratedNever()
                    .HasColumnName("sharedID");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("endDate");

                entity.Property(e => e.HorseId).HasColumnName("horseID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.UserScanId).HasColumnName("userScanID");

                entity.Property(e => e.UserShareId).HasColumnName("userShareID");

                entity.HasOne(d => d.Horse)
                    .WithMany(p => p.Shared)
                    .HasForeignKey(d => d.HorseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Shared__horseID__4707859D");

                entity.HasOne(d => d.UserScan)
                    .WithMany(p => p.SharedUserScan)
                    .HasForeignKey(d => d.UserScanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Shared__userScan__48EFCE0F");

                entity.HasOne(d => d.UserShare)
                    .WithMany(p => p.SharedUserShare)
                    .HasForeignKey(d => d.UserShareId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Shared__userShar__47FBA9D6");
            });

            modelBuilder.Entity<TakePart>(entity =>
            {
                entity.Property(e => e.TakePartId)
                    .ValueGeneratedNever()
                    .HasColumnName("takePartID");

                entity.Property(e => e.CompetitionId).HasColumnName("competitionID");

                entity.Property(e => e.HorseId).HasColumnName("horseID");

                entity.Property(e => e.Level)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("level");

                entity.Property(e => e.Place).HasColumnName("place");

                entity.Property(e => e.Result)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("result");

                entity.HasOne(d => d.Competition)
                    .WithMany(p => p.TakePart)
                    .HasForeignKey(d => d.CompetitionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TakePart__compet__5555A4F4");

                entity.HasOne(d => d.Horse)
                    .WithMany(p => p.TakePart)
                    .HasForeignKey(d => d.HorseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TakePart__horseI__546180BB");
            });

            modelBuilder.Entity<UnitOfMeasure>(entity =>
            {
                entity.HasKey(e => e.UnitId)
                    .HasName("PK__UnitOfMe__55D79215E96CDA1F");

                entity.Property(e => e.UnitId)
                    .ValueGeneratedNever()
                    .HasColumnName("unitID");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<UserAcount>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__UserAcou__CB9A1CDF7D16774F");

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("userID");

                entity.Property(e => e.AcountLogin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("acountLogin");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("date")
                    .HasColumnName("createdDate");

                entity.Property(e => e.DetailsId).HasColumnName("detailsID");

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("hash");

                entity.Property(e => e.Salt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salt");

                entity.Property(e => e.UserTypeId).HasColumnName("userTypeID");

                entity.HasOne(d => d.Details)
                    .WithMany(p => p.UserAcount)
                    .HasForeignKey(d => d.DetailsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserAcoun__detai__37C5420D");

                entity.HasOne(d => d.UserType)
                    .WithMany(p => p.UserAcount)
                    .HasForeignKey(d => d.UserTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserAcoun__creat__36D11DD4");
            });

            modelBuilder.Entity<UserType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("PK__UserType__F04DF11A7E8FE9B3");

                entity.Property(e => e.TypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("typeID");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<Visit>(entity =>
            {
                entity.HasKey(e => e.CareId)
                    .HasName("PK__Visit__5ACA4A7AA76F9E64");

                entity.Property(e => e.CareId)
                    .ValueGeneratedNever()
                    .HasColumnName("careID");

                entity.Property(e => e.ArtefactImage)
                    .IsUnicode(false)
                    .HasColumnName("artefactImage");

                entity.Property(e => e.Cost).HasColumnName("cost");

                entity.Property(e => e.DoctorId).HasColumnName("doctorID");

                entity.Property(e => e.HorseId).HasColumnName("horseID");

                entity.Property(e => e.Summary)
                    .IsUnicode(false)
                    .HasColumnName("summary");

                entity.Property(e => e.VisitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("visitDate");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.Visit)
                    .HasForeignKey(d => d.DoctorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Visit__doctorID__4336F4B9");

                entity.HasOne(d => d.Horse)
                    .WithMany(p => p.Visit)
                    .HasForeignKey(d => d.HorseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Visit__horseID__442B18F2");
            });

            OnModelCreatingPartial(modelBuilder);
           
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(System.Configuration.ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString);
        }
    }
}